proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=default_cache:32m max_size=1g  inactive=60m use_temp_path=off;

upstream core {
    server backend_1:8005;
}

upstream api {
    server blog:8000;
}

server {

    listen 443 ssl http2;
    server_name stockf.com;
    ssl_certificate /nginx/certs/stockf.com.crt;
    ssl_certificate_key /nginx/certs/stockf.com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    gzip on;
    gzip_comp_level 5;
    # определяет MIME типы, для которых будет работать сжатие
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    access_log /nginx/static/logs/log.log;
    error_log /nginx/static/logs/errlog.log;
    proxy_cache default_cache;
    proxy_cache_methods GET;
    proxy_cache_min_uses 2;
    proxy_cache_valid 200 301 302 120m;
    proxy_cache_valid 404 1m;

    location / {
        proxy_pass_header Server;
        proxy_pass http://core;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }
    
    location /static/ {
        alias /nginx/static/;
    }

    location /status {
        stub_status on;
        access_log off;
        http2_push /nginx/static/index/welcome-cat.jpg;  
    }
    
    location /index/ {
        alias /nginx/static/index/;
    }

    location /admin {
        proxy_pass http://core/admin;
    }

    location /api/v1 {
        proxy_no_cache 1;
        proxy_pass http://core/api;
    }

    location /api/ {
        proxy_no_cache 1;
        proxy_pass http://core/api/;
    }

    location /api/v1/ {
        proxy_no_cache 1;
        proxy_pass http://core/api/;
    }

    location /api {
        proxy_no_cache 1;
        proxy_pass http://core/api;
    }

}

server {
    listen 80;
    server_name stockf.com;

    return 301 https://$server_name$request_uri;
}

server {
  listen 8080;

  location / {
    root /nginx/static/;
  }

  location /api/ {
    proxy_pass http://api;
    proxy_set_header Host $http_host;
  }

}